# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 2

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 2

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
# TODO: "aggressive" seems to pre-start the initial_workers, otherwise the same. What's the right policy?
autoscaling_mode: aggressive

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This max value allowed is 1.0, which is the most conservative setting.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "" # e.g., rayproject/ray:0.8.7
    container_name: "" # e.g. ray_docker
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options: []  # Extra options to pass into "docker run"

    # Example of running a GPU head with CPU workers
    # head_image: "rayproject/ray:0.8.7-gpu"
    # head_run_options:
    #     - --runtime=nvidia

    # worker_image: "rayproject/ray:0.8.7"
    # worker_run_options: []

# Cloud-provider specific configuration.
# TODO: Is this the region we actually want? What's the cheapest?
provider:
    type: azure
    # https://azure.microsoft.com/en-us/global-infrastructure/locations
    location: westus2   # eastus2 would also work
    resource_group: ray-cluster
    # set subscription id otherwise the default from az cli will be used
    # subscription_id: 00000000-0000-0000-0000-000000000000

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
    ssh_private_key: ~/.ssh/id_rsa
    ssh_public_key: ~/.ssh/id_rsa.pub

# Provider-specific config for the head node, e.g. instance type.
head_node:
    azure_arm_parameters:
        vmSize: Standard_F2s_v2
        # List images https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
        imagePublisher: microsoft-dsvm
        imageOffer: ubuntu-1804
        imageSku: 1804-gen2
        imageVersion: 20.02.01
        # TODO: use a SSD rather than spinning HD -- would accelerate startup for sure
        # TODO: "template disk image", pre-configured for everything at startup

# Provider-specific config for worker nodes, e.g. instance type.
worker_nodes:
    azure_arm_parameters:
        # vmSize: Standard_F72s_v2
        vmSize: Standard_F2s_v2
        # List images https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
        imagePublisher: microsoft-dsvm
        imageOffer: ubuntu-1804
        imageSku: 1804-gen2
        imageVersion: 20.02.01
        # optionally set priority to use Spot instances
        priority: Spot
        # set a maximum price for spot instances if desired
        # billingProfile:
        #     maxPrice: -1

# List of shell commands to run to set up nodes.
setup_commands:
    - echo 'export PATH="$HOME/anaconda3/envs/tensorflow_p36/bin:$PATH"' >> ~/.bashrc
    - sudo pkill -9 apt-get || true
    - sudo pkill -9 dpkg || true
    - sudo dpkg --configure -a
    - sudo add-apt-repository ppa:deadsnakes/ppa -y
    - sudo apt update
    - sudo apt install --assume-yes make python3-pip python3.8 libgmp-dev libmpfr-dev libmpc-dev python3.8-dev
    - sudo rm -f /bin/python
    - sudo ln -s /usr/bin/python3.8 /bin/python
    - sudo -H python -m pip install --upgrade pip
    - sudo -H pip install virtualenv==20.0.23 pipenv ray==0.8.7
    - sudo pip install -e 'git+https://github.com/votingworks/electionguard-python.git#egg=electionguard'
    - sudo pip install -e 'git+https://github.com/votingworks/arlo-cvr-transparency#egg=arlo_cvre'
    # we need *lots* of open files to make this work, for some reason
    - sudo sysctl -w fs.file-max=5000000

# Custom commands that will be run on the head node after common setup.
head_setup_commands:
    - pip install azure-cli-core==3.4.0 azure-mgmt-compute==12.0.0 azure-mgmt-msi==1.0.0 azure-mgmt-network==10.1.0

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076

# TODO: create Azure blob storage for the results (default is "hot"; fastest is "premium")
# TODO: mount the Azure blobs (https://docs.microsoft.com/en-us/azure/storage/blobs/storage-how-to-mount-container-linux)
# TODO: make the Azure blobs writable for us, read-only for everybody else
# TODO: understand Azure "Key vaults" (secret storage and management)
# TODO: firewall-ish rules around the whole cluster?