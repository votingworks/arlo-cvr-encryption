# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 13

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 13

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 13

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
# TODO: the code for "aggressive" doesn't really change very much; do we just want a whole lot of initial workers?
autoscaling_mode: aggressive

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This max value allowed is 1.0, which is the most conservative setting.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 10

# Cloud-provider specific configuration.
# TODO: Is this the region we actually want? What's the cheapest?
provider:
    type: aws
    region: us-east-2
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-east-2a,us-east-2b,us-east-2c
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: False # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

available_node_types:
    worker_x64:
        node_config:
            InstanceType: c5a.16xlarge
        #            InstanceMarketOptions:
        #                MarketType: spot
        resources: {"CPU": 64}
        max_workers: 64
    worker_x64_alt:
        node_config:
            InstanceType: c5.16xlarge
#            InstanceMarketOptions:
#                MarketType: spot
        resources: {"CPU": 64}
        max_workers: 64
    head_x64:
        node_config:
            InstanceType: m5a.xlarge
            # InstanceType: c5a.24xlarge
        resources: {"CPU": 0}  # zero because we don't want workers on the head node
        max_workers: 0

# Eventually, we'll be able to specify multiple node types here. But not yet.
# https://github.com/ray-project/ray/issues/10929
worker_default_node_type: worker_x64
head_node_type: head_x64

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-048d11da5dca6e6f0  # customized version of above, with pre-installed libraries
#    ImageId: ami-0c56ef48fe96056ba # customized Ubuntu 18.04, pre-installed libraries
#    ImageId: ami-0483bcef1b4f0e5d8 # customized Ubuntu 16.04

    IamInstanceProfile:
      Arn: arn:aws:iam::339914263940:instance-profile/ray-head-arlo-v1

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-048d11da5dca6e6f0  # customized version of above, with pre-installed libraries
#    ImageId: ami-0c56ef48fe96056ba # customized Ubuntu 18.04, pre-installed libraries
#    ImageId: ami-0483bcef1b4f0e5d8 # customized Ubuntu 16.04

    IamInstanceProfile:
      Arn: arn:aws:iam::339914263940:instance-profile/ray-worker-arlo-v1

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
    # this command does everything from scratch
    # - sudo -H ubuntu-setup.sh

    # get any updates that might be newer than what's in the AMI
    - sudo -H pip install boto3==1.15.12
    - sudo pip install ray==1.1.0
    - sudo pip install --exists-action w -e 'git+https://github.com/votingworks/electionguard-python.git#egg=electionguard'
    - sudo pip install -e 'git+https://github.com/votingworks/arlo-e2e#egg=arlo_e2e'
#    - sudo mkdir /mnt/arlo-data
    - sudo s3fs arlo-e2e-denver-demo /mnt/arlo-data -o endpoint=us-east-2 -o iam_role=auto -o allow_other -o storage_class=standard_ia

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# To add additional Ray logging (if logs need to be captured to debug Ray), the magic text before "ray start" is:
# RAY_BACKEND_LOG_LEVEL=debug

# Command to start ray on the head node.
# Changed here to have --num-cpus 0, forcing no "worker" tasks to happen on the head node, which will free
# up more RAM for coordination tasks.
head_start_ray_commands:
    - ray stop
#    - ulimit -n 65536; RAY_ENABLE_MULTI_TENANCY=0 RAY_BACKEND_LOG_LEVEL=debug ray start --num-cpus 0 --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml
    - ulimit -n 65536; ray start --num-cpus 0 --head --port=6379 --object-manager-port=8076 --min-worker-port=10000 --max-worker-port=15000 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
#    - ulimit -n 65536; RAY_ENABLE_MULTI_TENANCY=0 RAY_BACKEND_LOG_LEVEL=debug ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076 --min-worker-port=10000 --max-worker-port=15000
