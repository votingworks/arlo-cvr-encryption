# An unique identifier for the head node and workers of this cluster.
cluster_name: default


# The maximum number of workers nodes to launch in addition to the head node.
max_workers: 19

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 10

# Cloud-provider specific configuration.
# TODO: Is this the region we actually want? What's the cheapest?
provider:
    type: aws
    region: us-east-2
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-east-2a,us-east-2b,us-east-2c
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: False # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

available_node_types:
    worker_x64_intel:
        node_config:
            InstanceType: c5.12xlarge
        #            InstanceMarketOptions:
        #                MarketType: spot
        resources: {"CPU": 48}
        max_workers: 100
    worker_x64_amd:
        node_config:
            InstanceType: c5a.16xlarge
#            InstanceMarketOptions:
#                MarketType: spot
        resources: {"CPU": 64}
        max_workers: 100
        min_workers: 19
    head_x64:
        node_config:
            InstanceType: m5a.xlarge
            # InstanceType: c5a.24xlarge
        resources: {"CPU": 0}  # zero because we don't want workers on the head node
        max_workers: 0

# Eventually, we'll be able to specify multiple node types here. But not yet.
# https://github.com/ray-project/ray/issues/10929
worker_default_node_type: worker_x64_amd
head_node_type: head_x64

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-0f542b2b48007b168  # customized Ubuntu, pre-install with arlo-e2e, ElectionGuard, Ray; 12 Feb 2021

    IamInstanceProfile:
      Arn: arn:aws:iam::339914263940:instance-profile/ray-head-arlo-v1

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-0f542b2b48007b168  # customized Ubuntu, pre-install with arlo-e2e, ElectionGuard, Ray; 12 Feb 2021

    IamInstanceProfile:
      Arn: arn:aws:iam::339914263940:instance-profile/ray-worker-arlo-v1

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
    # this command does everything from scratch
    # - sudo -H ubuntu-setup.sh

    # get any updates that might be newer than what's in the AMI
    # - sudo -H pip install boto3==1.15.12
    - sudo pip install -e 'git+https://github.com/votingworks/electionguard-python.git#egg=electionguard'
    - sudo pip install -e 'git+https://github.com/votingworks/arlo-e2e#egg=arlo_e2e'
#    - sudo pip install -e 'git+https://github.com/votingworks/arlo-e2e@boto-s3-integration#egg=arlo_e2e'

    # nightly wheel for Ray
    - sudo pip install -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-2.0.0.dev0-cp38-cp38-manylinux2014_x86_64.whl

    # no longer mounting this via s3fs: instead it's all happening with our built-in boto3 support!
    # - sudo mkdir /mnt/arlo-data
    # - sudo s3fs arlo-e2e-denver-demo /mnt/arlo-data -o endpoint=us-east-2 -o iam_role=auto -o allow_other -o storage_class=standard_ia -o complement_stat

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# To add additional Ray logging (if logs need to be captured to debug Ray), the magic text before "ray start" is:
# RAY_BACKEND_LOG_LEVEL=debug

# Command to start ray on the head node.
# Changed here to have --num-cpus 0, forcing no "worker" tasks to happen on the head node, which will free
# up more RAM for coordination tasks.
head_start_ray_commands:
    - ray stop
#    - ulimit -n 65536; RAY_ENABLE_MULTI_TENANCY=0 RAY_BACKEND_LOG_LEVEL=debug ray start --num-cpus 0 --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml
    - ulimit -n 65536; ray start --num-cpus 0 --head --port=6379 --object-manager-port=8076 --min-worker-port=10002 --max-worker-port=15000 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
#    - ulimit -n 65536; RAY_ENABLE_MULTI_TENANCY=0 RAY_BACKEND_LOG_LEVEL=debug ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076 --min-worker-port=10002 --max-worker-port=15000
